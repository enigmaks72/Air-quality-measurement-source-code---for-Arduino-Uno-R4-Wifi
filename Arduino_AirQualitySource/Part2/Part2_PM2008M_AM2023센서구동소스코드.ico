#include <Wire.h>  // I2C 통신을 위한 Wire 라이브러리
#include <Adafruit_AM2320.h>  // AM2320 센서를 위한 라이브러리

#define PM2008M_ADDRESS 0x28  // PM2008M 미세먼지 센서의 I2C 주소

Adafruit_AM2320 am2320 = Adafruit_AM2320();  // AM2320 센서 객체 생성

void setup() {
  Wire.begin();  // I2C 통신 시작
  Serial.begin(9600);  // 시리얼 모니터 시작
  
  Serial.println("PM2008M I2C 데이터 읽기 시작...");

  // AM2320 센서 초기화
  if (!am2320.begin()) {
    Serial.println("AM2320 센서를 찾을 수 없습니다.");
    while (1);  // 센서를 찾지 못하면 무한 루프
  }
  Serial.println("AM2320 센서 초기화 성공");
}

void loop() {
  // PM2008M 센서에서 미세먼지 데이터 읽기
  Wire.beginTransmission(PM2008M_ADDRESS);
  Wire.write(0x00);  // 데이터 요청 명령 (예시, 실제 명령은 데이터시트 참조)
  Wire.endTransmission();
  
  Wire.requestFrom(PM2008M_ADDRESS, 32);
  
  if (Wire.available() == 32) {
    byte buffer[32];
    for (int i = 0; i < 32; i++) {
      buffer[i] = Wire.read();
    }

    int pm1_0 = (buffer[10] << 8) | buffer[11];
    int pm2_5 = (buffer[12] << 8) | buffer[13];
    int pm10 = (buffer[14] << 8) | buffer[15];

    // 미세먼지 농도 출력
    Serial.print("PM1.0: ");
    Serial.print(pm1_0);
    Serial.print(" µg/m³, 등급: ");
    Serial.println(getAirQuality(pm1_0, "PM1.0"));

    Serial.print("PM2.5: ");
    Serial.print(pm2_5);
    Serial.print(" µg/m³, 등급: ");
    Serial.println(getAirQuality(pm2_5, "PM2.5"));

    Serial.print("PM10: ");
    Serial.print(pm10);
    Serial.print(" µg/m³, 등급: ");
    Serial.println(getAirQuality(pm10, "PM10"));
  } else {
    Serial.println("PM2008M 데이터 읽기 실패.");
  }

  // AM2320 센서로부터 온도 및 습도 읽기
  float temperature = am2320.readTemperature();  // 온도 읽기
  float humidity = am2320.readHumidity();        // 습도 읽기

  // 온도와 습도를 시리얼 모니터에 출력
  if (!isnan(temperature) && !isnan(humidity)) {
    Serial.print("온도: ");
    Serial.print(temperature);
    Serial.println(" °C");

    Serial.print("습도: ");
    Serial.print(humidity);
    Serial.println(" %");
  } else {
    Serial.println("AM2320 데이터 읽기 실패.");
  }

  delay(3000);  // 3초마다 데이터 갱신
}

// 미세먼지 농도를 등급으로 변환하는 함수
String getAirQuality(int pmValue, String type) {
  if (type == "PM2.5") {
    if (pmValue <= 15) return "매우 좋음";
    else if (pmValue <= 35) return "좋음";
    else if (pmValue <= 75) return "보통";
    else if (pmValue <= 100) return "나쁨";
    else return "매우 나쁨";
  } else if (type == "PM10") {
    if (pmValue <= 30) return "매우 좋음";
    else if (pmValue <= 80) return "좋음";
    else if (pmValue <= 150) return "보통";
    else if (pmValue <= 200) return "나쁨";
    else return "매우 나쁨";
  } else {
    // PM1.0은 공식 기준이 없어 PM2.5 기준을 참고하여 적용
    if (pmValue <= 15) return "매우 좋음";
    else if (pmValue <= 35) return "좋음";
    else if (pmValue <= 75) return "보통";
    else if (pmValue <= 100) return "나쁨";
    else return "매우 나쁨";
  }
}
